#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server'),
    sockerServer = require('../socketServer'),
    config = require('../libs/config'),
    log = require('../libs//log')(module),
    debug = require('debug')('react-tweets:server'),
    http = require('http'),
    fs = require('fs'),
    sslSettings = config.get("sslSettings"),
    secure = sslSettings.enabled,
    port = normalizePort(secure ? config.get("ssl") : process.env.PORT || config.get("port")),
    server = null,
    io = null;

/**
 * Get port from environment and store in Express.
 */

app.set('port', port);

/**
 * Create HTTP server.
 */

if (secure) {
  server = require('https').createServer({
    key: fs.readFileSync(sslSettings.key),
    cert: fs.readFileSync(sslSettings.cert),
    passphrase: sslSettings.passphrase
  }, app);
} else {
  server = require('http').createServer(app);
}

io = sockerServer(server);

require('../libs/twitter');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  log.info('Express server listening on ' + bind);
}
